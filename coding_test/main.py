# from logging import error
import os
import sys
import time
import json
import random


from rich import emoji
from rich.progress import track
from rich.console import Console
from rich.theme import Theme
from rich.table import Table


# FUNCTIONS 

def askQuestion(group, n):
    global  points, correct, incorrect
    # Ask question 
    print("---------------------------------------")
    console.print(questions[group]["question"][n])
    print("---------------------------------------")

    questions[group]["answered"][n] = input("Ievadiet atbildi => ").lower()
    # Check a answer
    if questions[group]["answers"][n] == questions[group]["answered"][n]:
        print("")
        console.print("[+] Atbilde ir pareiza: " + questions[group]["answers"][n], style="success")
        print("")
        points += questions[group]["points"][n]
        correct += 1
    else:
        print("")
        console.print("[-] PareizƒÅ atbilde ir: " + questions[group]["answers"][n], style="error" )
        print("")
        incorrect += 1

def getRandQuestNumList():
    list = []
    n = 1
    while n < 50:
        n += 1 
        rand = random.randint(1, 10)
        r = "N" + str(rand)

        if r not in list: 
            list.append(r)
        if len(list) == 10:
            break
    return list

def getSkillItem():
    skills = random.choice(PSkills)
    skill = questions["skills"][skills]
    return skill 

def giveQuestion():
    list = getRandQuestNumList()

    for key in list:
        skill = getSkillItem()
        askQuestion(skill, key)

# Color Theme: create new colour theme
custom_theme = Theme({  "error" : "bold red", 
                        "success" : "bold green", 
                        "attention" : "bold yellow", 
                        "warning" : "bold magenta",
                        "option" : "#4169E1",
                        "blocked": "#383B40"
                        })

# shortcut
console = Console(theme=custom_theme)



''' 
PƒÅrbauda, kƒÅda operƒìtƒÅjsistƒìma ir lietotƒÅjam
skatoties no rezultƒÅta izvadas attiecƒ´ga komanda
'''
if os.name == "nt": # posx, java, nt
    os.system("cls")
else:
    os.system("clear")

# Veriables

# points
points = 0

# corret / incorrect answers
correct = 0
incorrect = 0

# emojis
global emojies
emojies = ["üòí", "üò¢", "üò≠", "üòü", "üòû", "üò•", "üòñ", "‚òπ", "üòî"]

# Import json dictiionary
with open('dictionary.json') as dict:
    questions = json.load(dict)


# Sey to user, how to quit from app
console.print(">> Iziet no programmas var ar kombinƒÅciju (Ctrl + C)", style="bold white")

# introduction
console.print(questions["start"]["WELCOME"])
try:
    # Turn eneter to continiune
    input()  

    while True:

        # requiring a name
        current_username = str(input("Ievadiet savu vƒÅrdu => "))

        if current_username == "" or len(current_username) < 4 or len(current_username) > 24:
            console.print("[error][-][/] Jums jƒÅievada korekts vƒÅrds")
            continue

        # requiring user to enter skills
        console.print(questions["start"]["question"]["N1"])

        # Enter a skills key then split on "," char 
        PSkills = str(input("Atbildi ievadiet ar ','. Piemƒìrs a,e => ")).replace(" ","").lower().split(",")
        if len(PSkills) < 0:
            console.print("[error][-][/] Jums jƒÅizvƒìlas vismaz viena valoda")

        '''
        The loop goes through all the elements of PSkills, then in the perpetual loop it is checked 
        whether the entered element in PSkills coincides with some element from the dictionary.
        If it matches, it is output and saved if no error is displayed
        '''
        for ikey in PSkills:
            while True:
                if ikey in questions["skills"].keys():
                    console.print(ikey + ": J≈´s izvƒìlƒìjƒÅties " + questions["skills"][ikey], style="success")
                    break

                elif ikey not in questions["skills"].keys():
                    console.print(ikey + ": TƒÅdas opcijas neeksistƒì", style="error")
                    break

        # while True:

        try:
            giveQuestion()
            show_table = True

        except KeyError:
            for key in PSkills:
                if key not in questions["skills"].keys():
                    console.print("[error][-][/] Jums jƒÅizvƒìlas viens no pieejamajiem atbil≈æu variantiem.")
                    show_table = False
                    break



        # KOPSAVILKUMS
            
        if show_table:
            def step(step):
                print(step)
                
            for step in track(range(100)):
                
                console.print("J≈´su punktu skaits ir " + str(points), style="success")
                table = Table(title="Kopsavilkums")

                table.add_column("VƒÅrds", style="magenta")
                table.add_column("PareizƒÅs atbildes", style="green")
                table.add_column("NepareizƒÅs atbildes", justify="left", style="magenta")
                table.add_column("punkti", justify="left", style="green")

                table.add_row(str(current_username), str(correct), str(incorrect), str(points))
                
                console = Console()
                console.print(table)

            if points <= 3 and len(PSkills) == 1:
                console.print("\n[RESULT][!] [white]Tev vajadzƒìtu pamƒìƒ£inƒÅt izvƒìlƒìties vieglƒÅku valodu.[/]\n", style="green")
            elif points >= 4 and points <= 6 and len(PSkills) == 1:
                console.print("\n[RESULT][!] [white]Ne≈°aubƒ´≈°os ja tu vƒìl deletants programmƒì≈°anas sfƒìrƒÅ, kur≈° vƒìl nav uzspƒìjis vilties savos sap≈Üos[/]\n", style="green")
            elif points >= 7 and points <= 10 and len(PSkills) == 1:
                console.print("\n[RESULT][!] [white]Zini kurƒÅ valodƒÅ esi spƒìcƒ´gs/-a un pierƒÅdiji, ka ne tikai proti smuki runƒÅt, bet arƒ´ ar darbiem pierƒÅdƒ´t[/]\n", style="attention\n")
            elif points >= 1 and points <= 3 and len(PSkills) == 2:
                console.print("\n[RESULT][!] [white]Liecies pƒÅrliecinƒÅts savƒÅs zinƒÅ≈°anƒÅs, bet kaut kas vƒìl tr≈´kst[/]\n", style="green")
            elif points >= 4 and points <= 6 and len(PSkills) == 2:
                console.print("\n[RESULT][!] [white]Esi pƒÅrliecinƒÅts savƒÅs zinƒÅ≈°anƒÅs un saproti ko dari, bet vƒìl vajag pamƒÅcƒ´ties[/]\n", style="green")
            elif points >= 7 and points <= 10 and len(PSkills) == 2:
                console.print("\n[RESULT][!] [white]Esi pƒÅrliecinƒÅts savƒÅs zinƒÅ≈°anƒÅs un tie≈°ƒÅm saproti ko dari[/]\n", style="green")
            elif points >= 1 and points <= 3 and len(PSkills) == 3:
                console.print("\n[RESULT][!] [white]Pamƒìƒ£inƒÅji uzreiz gr≈´tƒÅko variantu, jo domƒÅji es, kƒÅ autors esmu ne ƒºoti gudrs un gr≈´tus jautƒÅjumus neuzdo≈°u[/]\n", style="green")
            elif points >= 4 and points <= 6 and len(PSkills) == 3:
                console.print("\n[RESULT][!] [white]Mƒìƒ£inƒÅji uzreiz visas trƒ´s valodas, bet tomƒìrt tev vajadzƒìtu vƒìl pamƒÅcƒ´ties.[/]\n", style="green")
            elif points >= 7 and points <= 10 and len(PSkills) == 3:
                console.print("\n[RESULT][!] [white]Noteikti ir pieredze un saproti, ko nozƒ´mƒì b≈´t programmistam. Skaties uz deletantiem no aug≈°as uz leju.\n TajƒÅ sakitƒÅ uz mani, jo tev liekas ≈°ie jautajumi pƒÅrƒÅk viegli un tizli. Un vispƒÅr priek≈° bƒìrnudƒÅrzniekiem taisƒ´ts tests[/]\n", style="green")
            elif points == 0:
                console.print("\n[RESULT][!] [white] Tu esi anskills, iemƒÅcies lietot Google vismaz[/]\n", style="green")
       
        break
except KeyboardInterrupt:
    
    emoji = random.choice(emojies)

    console.print("\n[attention]Ceru palaidƒ´si mani vƒìlreiz [/]" + emoji)
    sys.exit()
